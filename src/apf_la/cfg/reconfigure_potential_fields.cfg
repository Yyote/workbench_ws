#!/usr/bin/env python3

PACKAGE = "apf_la" # Указывает пакет
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()


# GLOBAL
gen.add("enable_attraction", bool_t, 0, "enable attraction calculation", False)


# REPULSION
gen.add("repulsion_multiplier", double_t, 0, "Repulsion multiplier. Normal values for 1t./1 deg. are approximately 0.002-0.006", 0.0025, 0, 0.03)
gen.add("max_calculation_distance", double_t, 0, "Maximum distance from lidar to the point to be processed by potential fields", 1, 0, 5)
gen.add("min_calculation_distance", double_t, 0, "Minimum distance from lidar to the point to be processed by potential fields", 0.2, 0, 1)
gen.add("RVIZ_repulsion_arrow", bool_t, 0, "Enable repulsion vector display", True)
gen.add("RVIZ_calculated_points_cloud", bool_t, 0, "Enable display of repulsion points", True)
gen.add("RVIZ_visibility_circle", bool_t, 0, "Enable potential field processing radius", True)


# ATTRACTION
gen.add("attraction_multiplier", double_t, 0, "Attraction multiplier.", 0.2, 0, 5)
gen.add("max_vector", double_t, 0, "Maximum velocity value calculated by attraction fields", 1, 0, 5)
gen.add("RVIZ_attraction_arrow", bool_t, 0, "Enable gravity vector display", True)
gen.add("RVIZ_goal", bool_t, 0, "Turn on display of the target point", True)
gen.add("enable_turn_vectors_to_global", bool_t, 0, "Turn vectors to global coordinat system", False)


# REGULATOR
gen.add("regulator_mode", int_t, 0, "Regulator mode. 1 - safe mode for wheeled robot (either drive or turn) 2 - holonomic robot mode 3 - simultaneous turning and moving (formulas like from tf2 tutorial in turtlesim)", 4, 1, 4)
gen.add("max_linear_speed", double_t, 0, "Maximum linear velocity value sent to the robot", 0.2, 0, 5)
gen.add("linear_speed_multiplier", double_t, 0, "linear speed multiplier", 1, 0, 10)
gen.add("max_angular_speed", double_t, 0, "Maximum angular speed value transmitted to robot", 0.75, 0, 5)
gen.add("angular_speed_multiplier", double_t, 0, "Angular velocity multiplier", 1, 0, 10)
gen.add("max_angle_to_accept_movement", double_t, 0, "The maximum value of the angle between the X axis of the robot and the direction of the resulting speed vector at which the robot begins to drive forward(controller mode 1)", 0.1, 0, 3.14)

# END
exit(gen.generate(PACKAGE, "apf_la", "reconfigure_potential_fields")) 
